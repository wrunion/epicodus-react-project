{"version":3,"sources":["components/Form.js","components/ItemDisplayMode.js","components/ItemDetailView.js","components/ItemControl.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","className","id","v4","onSubmit","e","preventDefault","handleSubmitCallback","itemName","target","value","description","available","parseInt","price","type","name","defaultValue","min","onClick","handleCancelClick","ItemDisplayMode","key","purchaseCallback","deleteCallback","handleDetailCallback","ItemDetailView","item","ItemControl","state","itemList","formShowing","itemSelected","displayForm","setState","handleFormSubmit","console","log","deleteItem","filter","findItemById","showDetailView","purchaseItem","map","this","selectedItemId","Fragment","detailView","selectedItem","length","handleAddItemClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.46f056b2.chunk.js","sourcesContent":["import React from 'react'\nimport {v4 } from 'uuid';\nimport PropTypes from 'prop-types';\n\nfunction Form(props) {\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    props.handleSubmitCallback({\n      itemName: e.target.itemName.value, \n      description: e.target.description.value, \n      available: parseInt(e.target.available.value), \n      price: parseInt(e.target.price.value), \n      id: e.target.id});\n  } \n\n  return (\n    <div className=\"Form\">\n      <form id={v4()} onSubmit={handleSubmit}>\n        <div className=\"inputField\">\n          <label>Item Name: <input type=\"text\" name=\"itemName\" id=\"itemName\" defaultValue=\"Green Tea\" /></label>\n        </div>\n        <div className=\"inputField\">\n          <label>Description: <input type=\"text\" name=\"description\" id=\"description\" defaultValue=\"Healthy and Delicious\" /></label>\n        </div>\n        <div className=\"inputField\">\n          <label>Price: <input type=\"number\" name=\"price\" price=\"price\" defaultValue=\"23\" min={0}/></label>\n        </div>\n        <div className=\"inputField\">\n          <label>Available: <input type=\"number\" name=\"available\" price=\"available\" min={0} defaultValue=\"100\" /></label>\n        </div>\n        <button type=\"submit\">Add Item</button>\n        <button type=\"button\" onClick={props.handleCancelClick}>Cancel</button>\n      </form>\n    </div>\n  );\n}\n\nForm.propTypes = {\n  handleSubmitCallback: PropTypes.func,\n  handleCancelClick: PropTypes.func\n};\n\nexport default Form;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ItemDisplayMode = (props) => {\n\n  function purchaseItem(id) {\n    props.purchaseCallback(id);\n  }\n  \n  function handleDeleteClick(id) {\n    props.deleteCallback(id);\n  }\n\n  function showDetailView(id) {\n    props.handleDetailCallback(id);\n  }\n\n  return (\n    <div className=\"ItemDisplayMode\" key={props.id}>\n    <h3>{props.name}</h3>\n      <p><em>{props.description}</em></p>\n      <p>Available: {props.available} | Price: {props.price}</p>\n      <button id={props.id} onClick={() => purchaseItem(props.id)}>Purchase</button>\n      <button id={props.id} onClick={() => handleDeleteClick(props.id)}>Delete</button>\n      <button onClick={() => showDetailView(props.id)}>View Details</button>\n    </div>\n  );\n}\n\nItemDisplayMode.propTypes = {\n  name: PropTypes.string,\n  description: PropTypes.string,\n  available: PropTypes.number,\n  price: PropTypes.number,\n  purchaseCallback: PropTypes.func,\n  deleteCallback: PropTypes.func,\n  handleDetailCallback: PropTypes.func\n} \n\nexport default ItemDisplayMode;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ItemDetailView = (props) => {\n  const { item } = props;\n\n  return (\n    <div className=\"ItemDetailView\" key={item.id}>\n      <h3>{item.itemName}</h3>\n      <p><em>{item.description}</em></p>\n      <p>Available: {item.available} | Price: {item.price}</p>\n      <p><em>Made in Oregon</em></p>\n      <button onClick={props.handleCancelClick}>Return to Tea List</button>\n    </div>\n  );\n}\n\nItemDetailView.propTypes = {\n  item: PropTypes.object,\n  handleCancelClick: PropTypes.func\n} \n\nexport default ItemDetailView;","import React, { Component } from 'react'\nimport Form from './Form';\nimport ItemDisplayMode from './ItemDisplayMode';\nimport ItemDetailView from './ItemDetailView';\n\nclass ItemControl extends Component {\n  state = {\n    itemList: [{\n      itemName: \"Green Matcha\",\n      description: \"A healthy tea that gives you energy and focus\",\n      available: 100,\n      price: 20, \n      id: 1\n    },\n    {\n      itemName: \"Lavender Blend\",\n      description: \"A soothing blend to wash away worries\",\n      available: 100,\n      price: 15,\n      id: 2\n    },\n    {\n      itemName: \"Chamomile\",\n      description: \"A relaxing tea to help you sleep\", \n      available: 100,\n      price: 10,\n      id: 3\n    }, \n    {\n      itemName: \"White Jasmine\",\n      description: \"A sweet blend for focus and health\",\n      available: 100,\n      price: 25,\n      id: 4\n    },\n    {\n      itemName: \"Earl Grey\",\n      description: \"Classic bergamont flavoring\",\n      available: 100,\n      price: 10,\n      id: 5\n    }\n  ],\n    formShowing: false,\n    itemSelected: null\n  }\n\n  displayForm = () => {\n    this.setState({formShowing: true});\n  }\n\n  handleFormSubmit = (item) => {\n    console.log(item);\n    this.setState({itemList: [item, ...this.state.itemList], formShowing: false});\n  }\n  \n  deleteItem = (id) => {\n    this.setState({itemList: this.state.itemList.filter(item => item.id !== id)});\n  }\n\n  findItemById = (id) => {\n    const item = this.state.itemList.filter(item => item.id === id)[0];\n    return item;\n  }\n\n  showDetailView = (id) => {\n    const item = this.findItemById(id);\n    this.setState({itemSelected: item.id});\n    console.log(item);\n    return item;\n  }\n\n  handleCancelClick = () => {\n    this.setState({formShowing: false, itemSelected: null});\n  }\n   \n  purchaseItem = (id) => {\n    this.setState({itemList: this.state.itemList.map(item => {\n      if (item.id === id) {\n        return {\n          itemName: item.itemName,\n          description: item.description,\n          available: item.available >= 1 ?  item.available - 1 : 0,\n          price: item.price, \n          id: item.id\n        } \n      } else {\n        return item;\n      }\n    })});\n  }\n\n  render() {\n    if (this.state.itemSelected !== null) {\n      const selectedItemId = this.state.itemSelected;\n      const item = this.findItemById(selectedItemId);\n      return (\n        <div className=\"ItemDetailView\">\n          <ItemDetailView \n            item={item}\n            handleCancelClick={this.handleCancelClick}/>\n        </div>\n      );\n    } else if (this.state.formShowing) {\n      return (\n        <React.Fragment>\n          <Form handleSubmitCallback={this.handleFormSubmit} \n          handleCancelClick={this.handleCancelClick} />\n          {this.state.itemList.map(item =>\n          <ItemDisplayMode \n            key={item.id}\n            id={item.id}  \n            name={item.itemName}\n            description={item.description}\n            available={item.available}\n            price={item.price}\n            detailView={this.state.detailView}\n            selectedItem={this.state.selectedItem}\n            deleteCallback={this.deleteItem}\n            purchaseCallback={this.purchaseItem}\n            handleDetailCallback={this.showDetailView}\n            />)}\n        </React.Fragment>\n      );\n    } else if ((this.state.formShowing === false) && (this.state.itemList.length > 0)) {\n      return (\n        <div className=\"ItemView\">\n        <button onClick={this.displayForm}>Add Item</button>\n        {this.state.itemList.map(item =>\n          <ItemDisplayMode \n            key={item.id}\n            id={item.id}  \n            name={item.itemName}\n            description={item.description}\n            available={item.available}\n            price={item.price}\n            deleteCallback={this.deleteItem}\n            purchaseCallback={this.purchaseItem}\n            handleAddItemClick={this.displayForm}\n            selectedItem={this.state.selectedItem}\n            handleDetailCallback={this.showDetailView}\n            />)}\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"DefaultView\">\n          <h2>There are no items to display.</h2>\n          <button onClick={this.displayForm}>Add Item</button>\n        </div>\n      );\n    }\n  }\n}\n\nexport default ItemControl;","import React from 'react';\nimport ItemControl from './ItemControl';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"Header\"><h1>AunTea's Organics</h1></div>\n      <ItemControl />\n      <div className=\"Footer\"><p>Copyright (c) 2020 AunTea's Organics</p></div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}